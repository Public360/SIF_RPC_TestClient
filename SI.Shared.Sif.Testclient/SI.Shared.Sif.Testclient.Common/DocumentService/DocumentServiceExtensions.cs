// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for DocumentService.
    /// </summary>
    public static partial class DocumentServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Ping(this IDocumentService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((IDocumentService)s).PingAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IDocumentService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PingWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// Create document
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            public static CreateDocumentOKResponse CreateDocument(this IDocumentService operations, CreateDocumentArgs createDocumentArgs = default(CreateDocumentArgs))
            {
                return Task.Factory.StartNew(s => ((IDocumentService)s).CreateDocumentAsync(createDocumentArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Create document
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateDocumentOKResponse> CreateDocumentAsync(this IDocumentService operations, CreateDocumentArgs createDocumentArgs = default(CreateDocumentArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDocumentWithHttpMessagesAsync(createDocumentArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Updates a document in 360. If a property is set to null, meaning
            /// not provided in the parameter passed to the method, the property is not
            /// updated. To be able to clear the field in 360° the property has to be set
            /// to “”. Only works for string properties.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdateDocumentOKResponse UpdateDocument(this IDocumentService operations, UpdateDocumentArgs updateDocumentArgs = default(UpdateDocumentArgs))
            {
                return Task.Factory.StartNew(s => ((IDocumentService)s).UpdateDocumentAsync(updateDocumentArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Updates a document in 360. If a property is set to null, meaning
            /// not provided in the parameter passed to the method, the property is not
            /// updated. To be able to clear the field in 360° the property has to be set
            /// to “”. Only works for string properties.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateDocumentOKResponse> UpdateDocumentAsync(this IDocumentService operations, UpdateDocumentArgs updateDocumentArgs = default(UpdateDocumentArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentWithHttpMessagesAsync(updateDocumentArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Take note that this method in addition to getting meta data on
            /// documents; may also be used to get file meta data and the physical
            /// file(s) inside the document.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getDocumentsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetDocumentsOKResponse GetDocuments(this IDocumentService operations, GetDocumentsArgs getDocumentsArgs = default(GetDocumentsArgs))
            {
                return Task.Factory.StartNew(s => ((IDocumentService)s).GetDocumentsAsync(getDocumentsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Take note that this method in addition to getting meta data on
            /// documents; may also be used to get file meta data and the physical
            /// file(s) inside the document.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getDocumentsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetDocumentsOKResponse> GetDocumentsAsync(this IDocumentService operations, GetDocumentsArgs getDocumentsArgs = default(GetDocumentsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDocumentsWithHttpMessagesAsync(getDocumentsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Method to sign off a document with a response code and an optional
            /// note.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signOffDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            public static SignOffDocumentOKResponse SignOffDocument(this IDocumentService operations, SignOffDocumentArgs signOffDocumentArgs = default(SignOffDocumentArgs))
            {
                return Task.Factory.StartNew(s => ((IDocumentService)s).SignOffDocumentAsync(signOffDocumentArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Method to sign off a document with a response code and an optional
            /// note.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signOffDocumentArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SignOffDocumentOKResponse> SignOffDocumentAsync(this IDocumentService operations, SignOffDocumentArgs signOffDocumentArgs = default(SignOffDocumentArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignOffDocumentWithHttpMessagesAsync(signOffDocumentArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Method to start the dispatch process for one or several documents.
            /// All files on each document will be included, and it will be
            /// dispatched to all recipients.
            /// 
            /// If any of the documents fail, the operation will continue with the
            /// next document in the list. A list of result objects will be returned. NB:
            /// The result only indicates if the dispatch process was started
            /// successfully. To see if the dispatch was completed successfully – check
            /// status in 360°.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dispatchDocumentsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static DispatchDocumentsOKResponse DispatchDocuments(this IDocumentService operations, DispatchDocumentsArgs dispatchDocumentsArgs = default(DispatchDocumentsArgs))
            {
                return Task.Factory.StartNew(s => ((IDocumentService)s).DispatchDocumentsAsync(dispatchDocumentsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Method to start the dispatch process for one or several documents.
            /// All files on each document will be included, and it will be
            /// dispatched to all recipients.
            /// 
            /// If any of the documents fail, the operation will continue with the
            /// next document in the list. A list of result objects will be returned. NB:
            /// The result only indicates if the dispatch process was started
            /// successfully. To see if the dispatch was completed successfully – check
            /// status in 360°.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dispatchDocumentsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DispatchDocumentsOKResponse> DispatchDocumentsAsync(this IDocumentService operations, DispatchDocumentsArgs dispatchDocumentsArgs = default(DispatchDocumentsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DispatchDocumentsWithHttpMessagesAsync(dispatchDocumentsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
