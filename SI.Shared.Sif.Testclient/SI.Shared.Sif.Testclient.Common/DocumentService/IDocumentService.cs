// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// 
    /// SI.Data.RPC DocumentService
    /// 
    /// </summary>
    public partial interface IDocumentService : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// 
        /// Just a ping method
        /// 
        /// </summary>
        /// <param name='pingArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(object pingArgs = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Create document
        /// 
        /// </summary>
        /// <param name='createDocumentArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CreateDocumentOKResponse>> CreateDocumentWithHttpMessagesAsync(CreateDocumentArgs createDocumentArgs = default(CreateDocumentArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Updates a document in 360. If a property is set to null,
        /// meaning not provided in the parameter passed to the method, the
        /// property is not updated. To be able to clear the field in 360°
        /// the property has to be set to “”. Only works for string
        /// properties.
        /// 
        /// </summary>
        /// <param name='updateDocumentArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateDocumentOKResponse>> UpdateDocumentWithHttpMessagesAsync(UpdateDocumentArgs updateDocumentArgs = default(UpdateDocumentArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Take note that this method in addition to getting meta
        /// data on documents; may also be used to get file meta data and the
        /// physical file(s) inside the document.
        /// 
        /// </summary>
        /// <param name='getDocumentsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetDocumentsOKResponse>> GetDocumentsWithHttpMessagesAsync(GetDocumentsArgs getDocumentsArgs = default(GetDocumentsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Method to sign off a document with a response code and an
        /// optional note.
        /// 
        /// </summary>
        /// <param name='signOffDocumentArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SignOffDocumentOKResponse>> SignOffDocumentWithHttpMessagesAsync(SignOffDocumentArgs signOffDocumentArgs = default(SignOffDocumentArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Method to start the dispatch process for one or several
        /// documents.
        /// All files on each document will be included, and it will
        /// be dispatched to all recipients.
        /// 
        /// If any of the documents fail, the operation will continue
        /// with the next document in the list. A list of result objects will
        /// be returned. NB: The result only indicates if the dispatch
        /// process was started successfully. To see if the dispatch was
        /// completed successfully – check status in 360°.
        /// 
        /// </summary>
        /// <param name='dispatchDocumentsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DispatchDocumentsOKResponse>> DispatchDocumentsWithHttpMessagesAsync(DispatchDocumentsArgs dispatchDocumentsArgs = default(DispatchDocumentsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
