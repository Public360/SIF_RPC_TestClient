// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class GetFileOKResponseRequestMessageRequestUri
    {
        /// <summary>
        /// Initializes a new instance of the
        /// GetFileOKResponseRequestMessageRequestUri class.
        /// </summary>
        public GetFileOKResponseRequestMessageRequestUri() { }

        /// <summary>
        /// Initializes a new instance of the
        /// GetFileOKResponseRequestMessageRequestUri class.
        /// </summary>
        public GetFileOKResponseRequestMessageRequestUri(string absolutePath = default(string), string absoluteUri = default(string), string localPath = default(string), string authority = default(string), string hostNameType = default(string), bool? isDefaultPort = default(bool?), bool? isFile = default(bool?), bool? isLoopback = default(bool?), string pathAndQuery = default(string), IList<string> segments = default(IList<string>), bool? isUnc = default(bool?), string host = default(string), int? port = default(int?), string query = default(string), string fragment = default(string), string scheme = default(string), string originalString = default(string), string dnsSafeHost = default(string), string idnHost = default(string), bool? isAbsoluteUri = default(bool?), bool? userEscaped = default(bool?), string userInfo = default(string))
        {
            AbsolutePath = absolutePath;
            AbsoluteUri = absoluteUri;
            LocalPath = localPath;
            Authority = authority;
            HostNameType = hostNameType;
            IsDefaultPort = isDefaultPort;
            IsFile = isFile;
            IsLoopback = isLoopback;
            PathAndQuery = pathAndQuery;
            Segments = segments;
            IsUnc = isUnc;
            Host = host;
            Port = port;
            Query = query;
            Fragment = fragment;
            Scheme = scheme;
            OriginalString = originalString;
            DnsSafeHost = dnsSafeHost;
            IdnHost = idnHost;
            IsAbsoluteUri = isAbsoluteUri;
            UserEscaped = userEscaped;
            UserInfo = userInfo;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AbsolutePath")]
        public string AbsolutePath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AbsoluteUri")]
        public string AbsoluteUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalPath")]
        public string LocalPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Authority")]
        public string Authority { get; set; }

        /// <summary>
        /// Possible values include: 'Unknown', 'Basic', 'Dns', 'IPv4', 'IPv6'
        /// </summary>
        [JsonProperty(PropertyName = "HostNameType")]
        public string HostNameType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDefaultPort")]
        public bool? IsDefaultPort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsFile")]
        public bool? IsFile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsLoopback")]
        public bool? IsLoopback { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PathAndQuery")]
        public string PathAndQuery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Segments")]
        public IList<string> Segments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsUnc")]
        public bool? IsUnc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Host")]
        public string Host { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Port")]
        public int? Port { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Query")]
        public string Query { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Fragment")]
        public string Fragment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OriginalString")]
        public string OriginalString { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DnsSafeHost")]
        public string DnsSafeHost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IdnHost")]
        public string IdnHost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsAbsoluteUri")]
        public bool? IsAbsoluteUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserEscaped")]
        public bool? UserEscaped { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserInfo")]
        public string UserInfo { get; set; }

    }
}
