// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for FileService.
    /// </summary>
    public static partial class FileServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Ping(this IFileService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((IFileService)s).PingAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IFileService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PingWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// Checks out a file for external control, and retrieves the same
            /// file as a Stream. The file must later be checked in with the same user
            /// and external system, so use this method in combination with
            /// UploadAndCheckInFileFromExternalControl
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkOutAndGetFileForExternalControlArgs'>
            /// (See model for parameter info)
            /// </param>
            public static CheckOutAndGetFileForExternalControlOKResponse CheckOutAndGetFileForExternalControl(this IFileService operations, CheckOutAndGetFileForExternalControlArgs checkOutAndGetFileForExternalControlArgs = default(CheckOutAndGetFileForExternalControlArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).CheckOutAndGetFileForExternalControlAsync(checkOutAndGetFileForExternalControlArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Checks out a file for external control, and retrieves the same
            /// file as a Stream. The file must later be checked in with the same user
            /// and external system, so use this method in combination with
            /// UploadAndCheckInFileFromExternalControl
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkOutAndGetFileForExternalControlArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckOutAndGetFileForExternalControlOKResponse> CheckOutAndGetFileForExternalControlAsync(this IFileService operations, CheckOutAndGetFileForExternalControlArgs checkOutAndGetFileForExternalControlArgs = default(CheckOutAndGetFileForExternalControlArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckOutAndGetFileForExternalControlWithHttpMessagesAsync(checkOutAndGetFileForExternalControlArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Streams a file to the 360° server, where it is checked in by the
            /// external system. This can be used on files that have been checked out
            /// with the method CheckOutAndGetFileForExternalControl.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadAndCheckInFileFromExternalControlArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UploadAndCheckInFileFromExternalControlOKResponse UploadAndCheckInFileFromExternalControl(this IFileService operations, UploadAndCheckInFileFromExternalControlArgs uploadAndCheckInFileFromExternalControlArgs = default(UploadAndCheckInFileFromExternalControlArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).UploadAndCheckInFileFromExternalControlAsync(uploadAndCheckInFileFromExternalControlArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Streams a file to the 360° server, where it is checked in by the
            /// external system. This can be used on files that have been checked out
            /// with the method CheckOutAndGetFileForExternalControl.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadAndCheckInFileFromExternalControlArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadAndCheckInFileFromExternalControlOKResponse> UploadAndCheckInFileFromExternalControlAsync(this IFileService operations, UploadAndCheckInFileFromExternalControlArgs uploadAndCheckInFileFromExternalControlArgs = default(UploadAndCheckInFileFromExternalControlArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadAndCheckInFileFromExternalControlWithHttpMessagesAsync(uploadAndCheckInFileFromExternalControlArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Streams a file to the 360° server, where it is stored temporarily,
            /// and should be referred to in CreateDocument() or UpdateDocument().
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UploadOKResponse Upload(this IFileService operations, UploadArgs uploadArgs = default(UploadArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).UploadAsync(uploadArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Streams a file to the 360° server, where it is stored temporarily,
            /// and should be referred to in CreateDocument() or UpdateDocument().
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadOKResponse> UploadAsync(this IFileService operations, UploadArgs uploadArgs = default(UploadArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadWithHttpMessagesAsync(uploadArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Get file with meta data
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFileWithMetadataArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetFileWithMetadataOKResponse GetFileWithMetadata(this IFileService operations, GetFileWithMetadataArgs getFileWithMetadataArgs = default(GetFileWithMetadataArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).GetFileWithMetadataAsync(getFileWithMetadataArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Get file with meta data
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFileWithMetadataArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetFileWithMetadataOKResponse> GetFileWithMetadataAsync(this IFileService operations, GetFileWithMetadataArgs getFileWithMetadataArgs = default(GetFileWithMetadataArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileWithMetadataWithHttpMessagesAsync(getFileWithMetadataArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// (none)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilesWithMetadataArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetFilesWithMetadataOKResponse GetFilesWithMetadata(this IFileService operations, GetFilesWithMetadataArgs getFilesWithMetadataArgs = default(GetFilesWithMetadataArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).GetFilesWithMetadataAsync(getFilesWithMetadataArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// (none)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilesWithMetadataArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetFilesWithMetadataOKResponse> GetFilesWithMetadataAsync(this IFileService operations, GetFilesWithMetadataArgs getFilesWithMetadataArgs = default(GetFilesWithMetadataArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilesWithMetadataWithHttpMessagesAsync(getFilesWithMetadataArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Get the file as a Stream.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFileArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetFileOKResponse GetFile(this IFileService operations, GetFileArgs getFileArgs = default(GetFileArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).GetFileAsync(getFileArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Get the file as a Stream.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFileArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetFileOKResponse> GetFileAsync(this IFileService operations, GetFileArgs getFileArgs = default(GetFileArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileWithHttpMessagesAsync(getFileArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Creates New file
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFileArgs'>
            /// (See model for parameter info)
            /// </param>
            public static CreateFileOKResponse CreateFile(this IFileService operations, CreateFileArgs createFileArgs = default(CreateFileArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).CreateFileAsync(createFileArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Creates New file
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFileArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateFileOKResponse> CreateFileAsync(this IFileService operations, CreateFileArgs createFileArgs = default(CreateFileArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFileWithHttpMessagesAsync(createFileArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Creates New file version and Updates properties of the file
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateFileArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdateFileOKResponse UpdateFile(this IFileService operations, UpdateFileArgs updateFileArgs = default(UpdateFileArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).UpdateFileAsync(updateFileArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Creates New file version and Updates properties of the file
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateFileArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateFileOKResponse> UpdateFileAsync(this IFileService operations, UpdateFileArgs updateFileArgs = default(UpdateFileArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFileWithHttpMessagesAsync(updateFileArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Delete File with given File Recno
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteFileArgs'>
            /// (See model for parameter info)
            /// </param>
            public static DeleteFileOKResponse DeleteFile(this IFileService operations, DeleteFileArgs deleteFileArgs = default(DeleteFileArgs))
            {
                return Task.Factory.StartNew(s => ((IFileService)s).DeleteFileAsync(deleteFileArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Delete File with given File Recno
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteFileArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteFileOKResponse> DeleteFileAsync(this IFileService operations, DeleteFileArgs deleteFileArgs = default(DeleteFileArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFileWithHttpMessagesAsync(deleteFileArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
