// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for UserService.
    /// </summary>
    public static partial class UserServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Paths(this IUserService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((IUserService)s).PathsAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PathsAsync(this IUserService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PathsWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// Creates or updates a user in 360, identified by its login name. If
            /// the user does not exist, it is created. If it exists, it is updated to
            /// match the input.
            /// A user must be connected to an existing 360° contact person, so
            /// always call SynchronizeContactPerson in the contact service first.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeUserArgs'>
            /// (See model for parameter info)
            /// </param>
            public static SynchronizeUserOKResponse SynchronizeUser(this IUserService operations, SynchronizeUserArgs synchronizeUserArgs = default(SynchronizeUserArgs))
            {
                return Task.Factory.StartNew(s => ((IUserService)s).SynchronizeUserAsync(synchronizeUserArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Creates or updates a user in 360, identified by its login name. If
            /// the user does not exist, it is created. If it exists, it is updated to
            /// match the input.
            /// A user must be connected to an existing 360° contact person, so
            /// always call SynchronizeContactPerson in the contact service first.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeUserArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SynchronizeUserOKResponse> SynchronizeUserAsync(this IUserService operations, SynchronizeUserArgs synchronizeUserArgs = default(SynchronizeUserArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizeUserWithHttpMessagesAsync(synchronizeUserArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Retrieves users from 360° based on criteria defined in the input
            /// parameter, input parameter can be empty. Possible criterias:
            /// UserId,ContactExternalId or none.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getUsersArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetUsersOKResponse GetUsers(this IUserService operations, GetUsersArgs getUsersArgs = default(GetUsersArgs))
            {
                return Task.Factory.StartNew(s => ((IUserService)s).GetUsersAsync(getUsersArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Retrieves users from 360° based on criteria defined in the input
            /// parameter, input parameter can be empty. Possible criterias:
            /// UserId,ContactExternalId or none.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getUsersArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetUsersOKResponse> GetUsersAsync(this IUserService operations, GetUsersArgs getUsersArgs = default(GetUsersArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(getUsersArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
