// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SupportService.
    /// </summary>
    public static partial class SupportServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Ping(this ISupportService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((ISupportService)s).PingAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this ISupportService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PingWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// This method makes it possible to get out the values of different
            /// code tables in 360°.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getCodeTableRowsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetCodeTableRowsOKResponse GetCodeTableRows(this ISupportService operations, GetCodeTableRowsArgs getCodeTableRowsArgs = default(GetCodeTableRowsArgs))
            {
                return Task.Factory.StartNew(s => ((ISupportService)s).GetCodeTableRowsAsync(getCodeTableRowsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This method makes it possible to get out the values of different
            /// code tables in 360°.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getCodeTableRowsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCodeTableRowsOKResponse> GetCodeTableRowsAsync(this ISupportService operations, GetCodeTableRowsArgs getCodeTableRowsArgs = default(GetCodeTableRowsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCodeTableRowsWithHttpMessagesAsync(getCodeTableRowsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Gets the entity logs from 360.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getLogsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetLogsOKResponse GetLogs(this ISupportService operations, GetLogsArgs getLogsArgs = default(GetLogsArgs))
            {
                return Task.Factory.StartNew(s => ((ISupportService)s).GetLogsAsync(getLogsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Gets the entity logs from 360.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getLogsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetLogsOKResponse> GetLogsAsync(this ISupportService operations, GetLogsArgs getLogsArgs = default(GetLogsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogsWithHttpMessagesAsync(getLogsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Check which build of SIF you have
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getSIFVersionArgs'>
            /// (See model for parameter info)
            /// </param>
            public static string GetSIFVersion(this ISupportService operations, object getSIFVersionArgs = default(object))
            {
                return Task.Factory.StartNew(s => ((ISupportService)s).GetSIFVersionAsync(getSIFVersionArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Check which build of SIF you have
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getSIFVersionArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSIFVersionAsync(this ISupportService operations, object getSIFVersionArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSIFVersionWithHttpMessagesAsync(getSIFVersionArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This method make it possible to get the events happened as per
            /// specified criteria.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getEventsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetEventsOKResponse GetEvents(this ISupportService operations, GetEventsArgs getEventsArgs = default(GetEventsArgs))
            {
                return Task.Factory.StartNew(s => ((ISupportService)s).GetEventsAsync(getEventsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This method make it possible to get the events happened as per
            /// specified criteria.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getEventsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetEventsOKResponse> GetEventsAsync(this ISupportService operations, GetEventsArgs getEventsArgs = default(GetEventsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(getEventsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
