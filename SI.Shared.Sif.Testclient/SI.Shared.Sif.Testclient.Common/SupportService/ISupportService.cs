// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// 
    /// SI.Data.RPC SupportService
    /// 
    /// </summary>
    public partial interface ISupportService : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// 
        /// Just a ping method
        /// 
        /// </summary>
        /// <param name='pingArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(object pingArgs = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This method makes it possible to get out the values of
        /// different code tables in 360°.
        /// 
        /// </summary>
        /// <param name='getCodeTableRowsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetCodeTableRowsOKResponse>> GetCodeTableRowsWithHttpMessagesAsync(GetCodeTableRowsArgs getCodeTableRowsArgs = default(GetCodeTableRowsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Gets the entity logs from 360.
        /// 
        /// </summary>
        /// <param name='getLogsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetLogsOKResponse>> GetLogsWithHttpMessagesAsync(GetLogsArgs getLogsArgs = default(GetLogsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Check which build of SIF you have
        /// 
        /// </summary>
        /// <param name='getSIFVersionArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetSIFVersionWithHttpMessagesAsync(object getSIFVersionArgs = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This method make it possible to get the events happened as
        /// per specified criteria.
        /// 
        /// </summary>
        /// <param name='getEventsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetEventsOKResponse>> GetEventsWithHttpMessagesAsync(GetEventsArgs getEventsArgs = default(GetEventsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
