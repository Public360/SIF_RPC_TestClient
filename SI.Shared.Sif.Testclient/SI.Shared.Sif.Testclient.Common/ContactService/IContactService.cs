// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// 
    /// SI.Data.RPC ContactService
    /// 
    /// </summary>
    public partial interface IContactService : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// 
        /// Just a ping method
        /// 
        /// </summary>
        /// <param name='pingArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(object pingArgs = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Creates or updates a contact person contact in 360° based
        /// on ExternalId.
        /// If the supplied ExternalId does not exists in 360° the
        /// contact is created.
        /// If the supplied ExternalId exists in 360° the contact is
        /// updated to mirror the supplied information.
        /// 
        /// </summary>
        /// <param name='synchronizeContactPersonArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SynchronizeContactPersonOKResponse>> SynchronizeContactPersonWithHttpMessagesAsync(SynchronizeContactPersonArgs synchronizeContactPersonArgs = default(SynchronizeContactPersonArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This creates or updates a private person contact in 360°
        /// based on PersonalIdNumber or ExternalID.
        /// If the supplied id does not exists in 360°, the contact is
        /// created.
        /// If the supplied id exists in 360° the contact is updated
        /// to mirror the supplied information.
        /// 
        /// </summary>
        /// <param name='synchronizePrivatePersonArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SynchronizePrivatePersonOKResponse>> SynchronizePrivatePersonWithHttpMessagesAsync(SynchronizePrivatePersonArgs synchronizePrivatePersonArgs = default(SynchronizePrivatePersonArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This creates or updates an enterprise contact in 360°
        /// based on EnterpriseNumber or ExternalID.
        /// If the supplied id does not exists in 360° the contact is
        /// created.
        /// If the supplied id exists in 360° the contact is updated
        /// to mirror the supplied data.
        /// 
        /// </summary>
        /// <param name='synchronizeEnterpriseArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SynchronizeEnterpriseOKResponse>> SynchronizeEnterpriseWithHttpMessagesAsync(SynchronizeEnterpriseArgs synchronizeEnterpriseArgs = default(SynchronizeEnterpriseArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Retrieves contact persons from 360° based on criteria
        /// defined in the input parameter. At least one criteria (Name,
        /// Recno, Categories or ExternalId) must be given.
        /// 
        /// </summary>
        /// <param name='getContactPersonsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetContactPersonsOKResponse>> GetContactPersonsWithHttpMessagesAsync(GetContactPersonsArgs getContactPersonsArgs = default(GetContactPersonsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Retrieves private persons from 360° based on criteria
        /// defined in the input parameter. At least one criteria (Name,
        /// Recno or PersonalIdNumber) must be given.
        /// 
        /// </summary>
        /// <param name='getPrivatePersonsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetPrivatePersonsOKResponse>> GetPrivatePersonsWithHttpMessagesAsync(GetPrivatePersonsArgs getPrivatePersonsArgs = default(GetPrivatePersonsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Retrieves enterprises from 360° based on criteria defined
        /// in the input parameter. At least one criteria (Name, Recno,
        /// Categories or EnterpriseNumber) must be given.
        /// 
        /// </summary>
        /// <param name='getEnterprisesArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetEnterprisesOKResponse>> GetEnterprisesWithHttpMessagesAsync(GetEnterprisesArgs getEnterprisesArgs = default(GetEnterprisesArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This updates an existing private person contact in 360°
        /// based on PersonalIdNumber, ExternalID or Recno.
        /// If the supplied id does not exist in 360°, then you will
        /// receive an error message.
        /// If the supplied id exists in 360°, the contact is updated
        /// with the provided data in the parameters.
        /// 
        /// </summary>
        /// <param name='updatePrivatePersonArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdatePrivatePersonOKResponse>> UpdatePrivatePersonWithHttpMessagesAsync(UpdatePrivatePersonArgs updatePrivatePersonArgs = default(UpdatePrivatePersonArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This updates an existing contact person contact in 360°
        /// based on  ExternalID or Recno.
        /// If the supplied id does not exist in 360°, then you will
        /// receive an error message.
        /// If the supplied id exists in 360°, the contact is updated
        /// with the provided data in the parameters.
        /// 
        /// </summary>
        /// <param name='updateContactPersonArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateContactPersonOKResponse>> UpdateContactPersonWithHttpMessagesAsync(UpdateContactPersonArgs updateContactPersonArgs = default(UpdateContactPersonArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// This updates an existing enterprise person contact in 360°
        /// based on EnterpriseNumber, ExternalId or Recno.
        /// If the supplied id does not exist in 360°, then you will
        /// receive an error message.
        /// If the supplied id exists in 360°, the contact is updated
        /// with the provided data in the parameters.
        /// 
        /// </summary>
        /// <param name='updateEnterpriseArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateEnterpriseOKResponse>> UpdateEnterpriseWithHttpMessagesAsync(UpdateEnterpriseArgs updateEnterpriseArgs = default(UpdateEnterpriseArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
