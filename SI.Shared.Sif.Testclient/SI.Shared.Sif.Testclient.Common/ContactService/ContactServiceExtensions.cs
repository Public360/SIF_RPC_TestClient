// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ContactService.
    /// </summary>
    public static partial class ContactServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Ping(this IContactService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((IContactService)s).PingAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IContactService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PingWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// Creates or updates a contact person contact in 360° based on
            /// ExternalId.
            /// If the supplied ExternalId does not exists in 360° the contact is
            /// created.
            /// If the supplied ExternalId exists in 360° the contact is updated
            /// to mirror the supplied information.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeContactPersonArgs'>
            /// (See model for parameter info)
            /// </param>
            public static SynchronizeContactPersonOKResponse SynchronizeContactPerson(this IContactService operations, SynchronizeContactPersonArgs synchronizeContactPersonArgs = default(SynchronizeContactPersonArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).SynchronizeContactPersonAsync(synchronizeContactPersonArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Creates or updates a contact person contact in 360° based on
            /// ExternalId.
            /// If the supplied ExternalId does not exists in 360° the contact is
            /// created.
            /// If the supplied ExternalId exists in 360° the contact is updated
            /// to mirror the supplied information.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeContactPersonArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SynchronizeContactPersonOKResponse> SynchronizeContactPersonAsync(this IContactService operations, SynchronizeContactPersonArgs synchronizeContactPersonArgs = default(SynchronizeContactPersonArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizeContactPersonWithHttpMessagesAsync(synchronizeContactPersonArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This creates or updates a private person contact in 360° based on
            /// PersonalIdNumber or ExternalID.
            /// If the supplied id does not exists in 360°, the contact is
            /// created.
            /// If the supplied id exists in 360° the contact is updated to mirror
            /// the supplied information.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizePrivatePersonArgs'>
            /// (See model for parameter info)
            /// </param>
            public static SynchronizePrivatePersonOKResponse SynchronizePrivatePerson(this IContactService operations, SynchronizePrivatePersonArgs synchronizePrivatePersonArgs = default(SynchronizePrivatePersonArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).SynchronizePrivatePersonAsync(synchronizePrivatePersonArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This creates or updates a private person contact in 360° based on
            /// PersonalIdNumber or ExternalID.
            /// If the supplied id does not exists in 360°, the contact is
            /// created.
            /// If the supplied id exists in 360° the contact is updated to mirror
            /// the supplied information.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizePrivatePersonArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SynchronizePrivatePersonOKResponse> SynchronizePrivatePersonAsync(this IContactService operations, SynchronizePrivatePersonArgs synchronizePrivatePersonArgs = default(SynchronizePrivatePersonArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizePrivatePersonWithHttpMessagesAsync(synchronizePrivatePersonArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This creates or updates an enterprise contact in 360° based on
            /// EnterpriseNumber or ExternalID.
            /// If the supplied id does not exists in 360° the contact is created.
            /// If the supplied id exists in 360° the contact is updated to mirror
            /// the supplied data.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeEnterpriseArgs'>
            /// (See model for parameter info)
            /// </param>
            public static SynchronizeEnterpriseOKResponse SynchronizeEnterprise(this IContactService operations, SynchronizeEnterpriseArgs synchronizeEnterpriseArgs = default(SynchronizeEnterpriseArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).SynchronizeEnterpriseAsync(synchronizeEnterpriseArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This creates or updates an enterprise contact in 360° based on
            /// EnterpriseNumber or ExternalID.
            /// If the supplied id does not exists in 360° the contact is created.
            /// If the supplied id exists in 360° the contact is updated to mirror
            /// the supplied data.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='synchronizeEnterpriseArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SynchronizeEnterpriseOKResponse> SynchronizeEnterpriseAsync(this IContactService operations, SynchronizeEnterpriseArgs synchronizeEnterpriseArgs = default(SynchronizeEnterpriseArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizeEnterpriseWithHttpMessagesAsync(synchronizeEnterpriseArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Retrieves contact persons from 360° based on criteria defined in
            /// the input parameter. At least one criteria (Name, Recno, Categories or
            /// ExternalId) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContactPersonsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetContactPersonsOKResponse GetContactPersons(this IContactService operations, GetContactPersonsArgs getContactPersonsArgs = default(GetContactPersonsArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).GetContactPersonsAsync(getContactPersonsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Retrieves contact persons from 360° based on criteria defined in
            /// the input parameter. At least one criteria (Name, Recno, Categories or
            /// ExternalId) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContactPersonsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetContactPersonsOKResponse> GetContactPersonsAsync(this IContactService operations, GetContactPersonsArgs getContactPersonsArgs = default(GetContactPersonsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContactPersonsWithHttpMessagesAsync(getContactPersonsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Retrieves private persons from 360° based on criteria defined in
            /// the input parameter. At least one criteria (Name, Recno or
            /// PersonalIdNumber) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getPrivatePersonsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetPrivatePersonsOKResponse GetPrivatePersons(this IContactService operations, GetPrivatePersonsArgs getPrivatePersonsArgs = default(GetPrivatePersonsArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).GetPrivatePersonsAsync(getPrivatePersonsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Retrieves private persons from 360° based on criteria defined in
            /// the input parameter. At least one criteria (Name, Recno or
            /// PersonalIdNumber) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getPrivatePersonsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPrivatePersonsOKResponse> GetPrivatePersonsAsync(this IContactService operations, GetPrivatePersonsArgs getPrivatePersonsArgs = default(GetPrivatePersonsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrivatePersonsWithHttpMessagesAsync(getPrivatePersonsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Retrieves enterprises from 360° based on criteria defined in the
            /// input parameter. At least one criteria (Name, Recno, Categories or
            /// EnterpriseNumber) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getEnterprisesArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetEnterprisesOKResponse GetEnterprises(this IContactService operations, GetEnterprisesArgs getEnterprisesArgs = default(GetEnterprisesArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).GetEnterprisesAsync(getEnterprisesArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Retrieves enterprises from 360° based on criteria defined in the
            /// input parameter. At least one criteria (Name, Recno, Categories or
            /// EnterpriseNumber) must be given.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getEnterprisesArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetEnterprisesOKResponse> GetEnterprisesAsync(this IContactService operations, GetEnterprisesArgs getEnterprisesArgs = default(GetEnterprisesArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnterprisesWithHttpMessagesAsync(getEnterprisesArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This updates an existing private person contact in 360° based on
            /// PersonalIdNumber, ExternalID or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatePrivatePersonArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdatePrivatePersonOKResponse UpdatePrivatePerson(this IContactService operations, UpdatePrivatePersonArgs updatePrivatePersonArgs = default(UpdatePrivatePersonArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).UpdatePrivatePersonAsync(updatePrivatePersonArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This updates an existing private person contact in 360° based on
            /// PersonalIdNumber, ExternalID or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatePrivatePersonArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatePrivatePersonOKResponse> UpdatePrivatePersonAsync(this IContactService operations, UpdatePrivatePersonArgs updatePrivatePersonArgs = default(UpdatePrivatePersonArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePrivatePersonWithHttpMessagesAsync(updatePrivatePersonArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This updates an existing contact person contact in 360° based on
            /// ExternalID or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateContactPersonArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdateContactPersonOKResponse UpdateContactPerson(this IContactService operations, UpdateContactPersonArgs updateContactPersonArgs = default(UpdateContactPersonArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).UpdateContactPersonAsync(updateContactPersonArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This updates an existing contact person contact in 360° based on
            /// ExternalID or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateContactPersonArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateContactPersonOKResponse> UpdateContactPersonAsync(this IContactService operations, UpdateContactPersonArgs updateContactPersonArgs = default(UpdateContactPersonArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateContactPersonWithHttpMessagesAsync(updateContactPersonArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// This updates an existing enterprise person contact in 360° based
            /// on EnterpriseNumber, ExternalId or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateEnterpriseArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdateEnterpriseOKResponse UpdateEnterprise(this IContactService operations, UpdateEnterpriseArgs updateEnterpriseArgs = default(UpdateEnterpriseArgs))
            {
                return Task.Factory.StartNew(s => ((IContactService)s).UpdateEnterpriseAsync(updateEnterpriseArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// This updates an existing enterprise person contact in 360° based
            /// on EnterpriseNumber, ExternalId or Recno.
            /// If the supplied id does not exist in 360°, then you will receive
            /// an error message.
            /// If the supplied id exists in 360°, the contact is updated with the
            /// provided data in the parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateEnterpriseArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateEnterpriseOKResponse> UpdateEnterpriseAsync(this IContactService operations, UpdateEnterpriseArgs updateEnterpriseArgs = default(UpdateEnterpriseArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEnterpriseWithHttpMessagesAsync(updateEnterpriseArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
