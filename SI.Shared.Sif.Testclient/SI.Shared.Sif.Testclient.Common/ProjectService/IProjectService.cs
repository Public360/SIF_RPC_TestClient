// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// 
    /// SI.Data.RPC ProjectService
    /// 
    /// </summary>
    public partial interface IProjectService : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// 
        /// Just a ping method
        /// 
        /// </summary>
        /// <param name='pingArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(object pingArgs = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Creates a project in 360° with the project type “Project”.
        /// The parameters in the data contracts accept either code value of
        /// the respective code or recno if nothing else is specified.
        /// 
        /// </summary>
        /// <param name='createProjectArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CreateProjectOKResponse>> CreateProjectWithHttpMessagesAsync(CreateProjectArgs createProjectArgs = default(CreateProjectArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Retrieves a list of all projects fulfilling the criteria
        /// of all the nonblank properties of the supplied parameters.
        /// 
        /// </summary>
        /// <param name='getProjectsArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetProjectsOKResponse>> GetProjectsWithHttpMessagesAsync(GetProjectsArgs getProjectsArgs = default(GetProjectsArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// Updates a project in 360.
        /// If a property is set to null, meaning not provided in the
        /// parameter passed to the method, the property is not updated. To
        /// clear the field in 360° the property must be explicitly set to
        /// “”. Only works for string properties.
        /// 
        /// </summary>
        /// <param name='updateProjectArgs'>
        /// (See model for parameter info)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateProjectOKResponse>> UpdateProjectWithHttpMessagesAsync(UpdateProjectArgs updateProjectArgs = default(UpdateProjectArgs), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
