// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SI.Shared.Sif.Testclient.Common
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ProjectService.
    /// </summary>
    public static partial class ProjectServiceExtensions
    {
            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            public static void Ping(this IProjectService operations, object pingArgs = default(object))
            {
                Task.Factory.StartNew(s => ((IProjectService)s).PingAsync(pingArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Just a ping method
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pingArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IProjectService operations, object pingArgs = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PingWithHttpMessagesAsync(pingArgs, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 
            /// Creates a project in 360° with the project type “Project”. The
            /// parameters in the data contracts accept either code value of the
            /// respective code or recno if nothing else is specified.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createProjectArgs'>
            /// (See model for parameter info)
            /// </param>
            public static CreateProjectOKResponse CreateProject(this IProjectService operations, CreateProjectArgs createProjectArgs = default(CreateProjectArgs))
            {
                return Task.Factory.StartNew(s => ((IProjectService)s).CreateProjectAsync(createProjectArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Creates a project in 360° with the project type “Project”. The
            /// parameters in the data contracts accept either code value of the
            /// respective code or recno if nothing else is specified.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createProjectArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateProjectOKResponse> CreateProjectAsync(this IProjectService operations, CreateProjectArgs createProjectArgs = default(CreateProjectArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectWithHttpMessagesAsync(createProjectArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Retrieves a list of all projects fulfilling the criteria of all
            /// the nonblank properties of the supplied parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getProjectsArgs'>
            /// (See model for parameter info)
            /// </param>
            public static GetProjectsOKResponse GetProjects(this IProjectService operations, GetProjectsArgs getProjectsArgs = default(GetProjectsArgs))
            {
                return Task.Factory.StartNew(s => ((IProjectService)s).GetProjectsAsync(getProjectsArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Retrieves a list of all projects fulfilling the criteria of all
            /// the nonblank properties of the supplied parameters.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getProjectsArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetProjectsOKResponse> GetProjectsAsync(this IProjectService operations, GetProjectsArgs getProjectsArgs = default(GetProjectsArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectsWithHttpMessagesAsync(getProjectsArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 
            /// Updates a project in 360.
            /// If a property is set to null, meaning not provided in the
            /// parameter passed to the method, the property is not updated. To clear the
            /// field in 360° the property must be explicitly set to “”. Only works for
            /// string properties.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateProjectArgs'>
            /// (See model for parameter info)
            /// </param>
            public static UpdateProjectOKResponse UpdateProject(this IProjectService operations, UpdateProjectArgs updateProjectArgs = default(UpdateProjectArgs))
            {
                return Task.Factory.StartNew(s => ((IProjectService)s).UpdateProjectAsync(updateProjectArgs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 
            /// Updates a project in 360.
            /// If a property is set to null, meaning not provided in the
            /// parameter passed to the method, the property is not updated. To clear the
            /// field in 360° the property must be explicitly set to “”. Only works for
            /// string properties.
            /// 
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateProjectArgs'>
            /// (See model for parameter info)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateProjectOKResponse> UpdateProjectAsync(this IProjectService operations, UpdateProjectArgs updateProjectArgs = default(UpdateProjectArgs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectWithHttpMessagesAsync(updateProjectArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
